// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Prashant Agrawal",
            "email": "prashant.eee.nitt@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/robot/state": {
            "get": {
                "description": "Get the current state of the robot service including robot position, task count and tasks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Robot State"
                ],
                "summary": "Get the current state of the robot service",
                "responses": {
                    "200": {
                        "description": "Current state of the robot service",
                        "schema": {
                            "$ref": "#/definitions/robot.ServiceState"
                        }
                    }
                }
            }
        },
        "/robot/tasks": {
            "post": {
                "description": "Add a new robot task with commands and optional delay",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Robot Tasks"
                ],
                "summary": "Add a new robot task",
                "parameters": [
                    {
                        "description": "Add Task Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.AddTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Task ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Error message",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/robot/tasks/{id}/cancel": {
            "put": {
                "description": "Cancel a robot task by its ID, if the task is in progress or pending",
                "tags": [
                    "Robot Tasks"
                ],
                "summary": "Cancel a robot task by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Cancellation request accepted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Error message",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.AddTaskRequest": {
            "description": "Request body for adding a new robot task",
            "type": "object",
            "required": [
                "commands"
            ],
            "properties": {
                "commands": {
                    "description": "Commands to be executed by the robot",
                    "type": "string",
                    "example": "N E S W"
                },
                "delay_between_commands": {
                    "description": "Delay between executing commands, optional",
                    "type": "string",
                    "example": "1s"
                }
            }
        },
        "api.ErrorResponse": {
            "description": "Generic error response.",
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Job not found"
                }
            }
        },
        "robot.RobotState": {
            "type": "object",
            "properties": {
                "x": {
                    "description": "Current X coordinate of the robot",
                    "type": "integer"
                },
                "y": {
                    "description": "Current Y coordinate of the robot",
                    "type": "integer"
                }
            }
        },
        "robot.RobotTask": {
            "type": "object",
            "properties": {
                "commands": {
                    "description": "List of commands to be executed by the robot",
                    "type": "string",
                    "example": "N E S W"
                },
                "delay_between_commands": {
                    "description": "Delay between executing commands",
                    "type": "string",
                    "example": "1s"
                },
                "error": {
                    "description": "Error message if the task fails",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier for the task",
                    "type": "string"
                },
                "sequence_num": {
                    "description": "Sequence number for the task, used for ordering tasks in the queue",
                    "type": "integer"
                },
                "state": {
                    "description": "Current state of the task",
                    "type": "string",
                    "example": "Pending"
                }
            }
        },
        "robot.ServiceState": {
            "type": "object",
            "properties": {
                "current_task_count": {
                    "description": "Current number of tasks in the service",
                    "type": "integer"
                },
                "robot_state": {
                    "description": "Current state of the robot",
                    "allOf": [
                        {
                            "$ref": "#/definitions/robot.RobotState"
                        }
                    ]
                },
                "tasks": {
                    "description": "Map of task IDs to RobotTask objects",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/robot.RobotTask"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Robot Warehouse System",
	Description:      "This is a REST API for managing robot tasks in a warehouse system.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
